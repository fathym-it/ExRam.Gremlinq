<#+

private static string[] Untyped(IEnumerable<string> interfaces)
{
    return interfaces
        .Where(iface => GetTypeParameters(iface).Length == 0)
        .ToArray();
}

private static string[] Typed(IEnumerable<string> interfaces)
{
    return interfaces
        .Where(iface => GetTypeParameters(iface).Length > 0)
        .ToArray();
}

private static string[] Element(IEnumerable<string> interfaces)
{
    return interfaces
        .Where(iface => iface.Contains("IElement") || iface.Contains("IVertex") || iface.Contains("Edge"))
        .ToArray();
}

private static string[] EdgeOrVertex(IEnumerable<string> interfaces)
{
    return interfaces
        .Where(iface => iface.Contains("IVertex") || iface.Contains("EdgeGremlinQuery"))
        .ToArray();
}

private static string ChangeType(string iface, string newType)
{
    if (GetElement(iface) is string elementType)
        return iface.Replace(elementType, newType);

    return iface + "<" + newType + ">";
}

private static string[] GetTypeParameters(string str)
{
    var start = str.IndexOf('<');
    if (start == -1)
        return Array.Empty<string>();

    var end = str.IndexOf('>', start);
    if (end == -1)
        return Array.Empty<string>();
        
    return str
        .Substring(start + 1, end - start - 1)
        .Split(',')
        .Select(x => x.Trim())
        .ToArray();
}

private static string GetElement(string str)
{
    return GetTypeParameters(str).FirstOrDefault();
}

private static string GetArgumentList(string template, int argumentCount, bool hasPreceedingArguments = false, bool hasFollowingArguments = false)
{
    return GetArgumentList(template, ", ", argumentCount, hasPreceedingArguments, hasFollowingArguments);
}

private static string GetArgumentList(string template, string separator, int argumentCount, bool hasPreceedingArguments = false, bool hasFollowingArguments = false)
{
    var str = "";

    if (argumentCount > 0 && hasPreceedingArguments)
        str = str + separator;

    for (var i = 1; i <= argumentCount; i++)
    {
        if (i > 1)
            str = str + separator;

        str += string.Format(template, i);
    }

    if (argumentCount > 0 && hasFollowingArguments)
        str = str + separator;

    return str;
}
#>

