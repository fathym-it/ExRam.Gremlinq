<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#@ include file="T4\Constants.tt" #>
#nullable enable
using System;
using System.Linq.Expressions;
using System.Collections.Generic;
using Gremlin.Net.Process.Traversal;

namespace ExRam.Gremlinq.Core
{
    partial class GremlinQuery<TElement, TOutVertex, TInVertex, TScalar, TMeta, TFoldedQuery>
    {
<# for(var i = 2; i <= 16; i++) { #>
        IValueGremlinQuery<(<#= GetArgumentList("T{0}", i) #>)> IGremlinQueryBase.Select<<#= GetArgumentList("T{0}", i) #>>(<#= GetArgumentList("StepLabel<T{0}> label{0}", i) #>) => Project<(<#= GetArgumentList("T{0}", i) #>)>(p => p.ToTuple()<#= GetArgumentList(".By(_ => _.Select(label{0}))", "", i) #>);

        IValueTupleGremlinQuery<(<#= GetArgumentList("T{0}", i) #>)> IValueTupleGremlinQueryBase<TElement>.Select<<#= GetArgumentList("T{0}", i) #>>(<#= GetArgumentList("Expression<Func<TElement, T{0}>> projection{0}", i) #>) => Select<IValueTupleGremlinQuery<(<#= GetArgumentList("T{0}", i) #>)>>(<#= GetArgumentList("projection{0}", i) #>);
<# } #>

<# foreach(var iface in Untyped(substitutedBaseInterfaces)){ #>
        <#= ChangeType(iface, "TResult").Replace("Base", "") #> <#= iface #>.Cast<TResult>() => Cast<TResult>();
<# } #>

<# foreach(var iface in Typed(substitutedBaseInterfaces))
{ #>
        TTargetQuery IGremlinQueryBaseRec<TElement, <#= iface #>>.Aggregate<TTargetQuery>(Func<<#= iface #>, StepLabel<IArrayGremlinQuery<TElement[], TElement, <#= iface #>>, TElement[]>, TTargetQuery> continuation) => Aggregate(Scope.Local, new StepLabel<IArrayGremlinQuery<TElement[], TElement, <#= iface #>>, TElement[]>(), continuation);
        TTargetQuery IGremlinQueryBaseRec<TElement, <#= iface #>>.AggregateGlobal<TTargetQuery>(Func<<#= iface #>, StepLabel<IArrayGremlinQuery<TElement[], TElement, <#= iface #>>, TElement[]>, TTargetQuery> continuation) => Aggregate(Scope.Global, new StepLabel<IArrayGremlinQuery<TElement[], TElement, <#= iface #>>, TElement[]>(), continuation);

        TTargetQuery IGremlinQueryBaseRec<TElement, <#= iface #>>.As<TTargetQuery>(Func<<#= iface #>, StepLabel<<#= iface #>, TElement>, TTargetQuery> continuation) => As<StepLabel<<#= iface #>, TElement>, TTargetQuery>(continuation);
        <#= iface #> IGremlinQueryBaseRec<TElement, <#= iface #>>.As(StepLabel<TElement> stepLabel) => As(stepLabel);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.And(params Func<<#= iface #>, IGremlinQueryBase>[] andTraversals) => And(andTraversals);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Barrier() => Barrier();

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Choose<TTargetQuery>(Func<<#= iface #>, IGremlinQueryBase> traversalPredicate, Func<<#= iface #>, TTargetQuery> trueChoice, Func<<#= iface #>, TTargetQuery> falseChoice) => Choose(traversalPredicate, trueChoice, falseChoice);
        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Choose<TTargetQuery>(Func<<#= iface #>, IGremlinQueryBase> traversalPredicate, Func<<#= iface #>, TTargetQuery> trueChoice) => Choose(traversalPredicate, trueChoice);
        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Choose<TTargetQuery>(Func<IChooseBuilder<<#= iface #>>, IChooseBuilderWithCaseOrDefault<TTargetQuery>> continuation) => Choose<TTargetQuery>(continuation);

        TTargetQuery IGremlinQueryBaseRec<TElement, <#= iface #>>.Choose<TTargetQuery>(Expression<Func<TElement, bool>> predicate, Func<<#= iface #>, TTargetQuery> trueChoice, Func<<#= iface #>, TTargetQuery> falseChoice) => Choose(predicate, trueChoice, falseChoice);
        TTargetQuery IGremlinQueryBaseRec<TElement, <#= iface #>>.Choose<TTargetQuery>(Expression<Func<TElement, bool>> predicate, Func<<#= iface #>, TTargetQuery> trueChoice) => Choose(predicate, trueChoice);

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Coalesce<TTargetQuery>(params Func<<#= iface #>, TTargetQuery>[] traversals) => Coalesce(traversals);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Coin(double probability) => Coin(probability);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.CyclicPath() => CyclicPath();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Dedup() => DedupGlobal();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.DedupLocal() => DedupLocal();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Emit() => Emit();

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.FlatMap<TTargetQuery>(Func<<#= iface #>, TTargetQuery> mapping) => FlatMap(mapping);

        IArrayGremlinQuery<TElement[], TElement, <#= iface #>> IGremlinQueryBaseRec<TElement, <#= iface #>>.ForceArray() => ChangeQueryType<IArrayGremlinQuery<TElement[], TElement, <#= iface #>>>();

        IArrayGremlinQuery<TElement[], TElement, <#= iface #>> IGremlinQueryBaseRec<TElement, <#= iface #>>.Fold() => Fold<<#= iface #>>();

        IValueGremlinQuery<IDictionary<TNewKey, TNewValue>> IGremlinQueryBaseRec<<#= iface #>>.Group<TNewKey, TNewValue>(Func<IGroupBuilder<<#= iface #>>, IGroupBuilderWithKeyAndValue<<#= iface #>, TNewKey, TNewValue>> groupBuilder) => Group(groupBuilder);
        IValueGremlinQuery<IDictionary<TNewKey, object>> IGremlinQueryBaseRec<<#= iface #>>.Group<TNewKey>(Func<IGroupBuilder<<#= iface #>>, IGroupBuilderWithKey<<#= iface #>, TNewKey>> groupBuilder) => Group(groupBuilder);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Identity() => Identity();

        <#= iface #> IGremlinQueryBaseRec<TElement, <#= iface #>>.Inject(params TElement[] elements) => Inject(elements);
        
        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Limit(long count) => LimitGlobal(count);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.LimitLocal(long count) => LimitLocal(count);

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Local<TTargetQuery>(Func<<#= iface #> , TTargetQuery> localTraversal) => Local(localTraversal);

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Map<TTargetQuery>(Func<<#= iface #>, TTargetQuery> mapping) => Map(mapping);
        
        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Not(Func<<#= iface #>, IGremlinQueryBase> notTraversal) => Not(notTraversal);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.None() => None();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Optional(Func<<#= iface #>, <#= iface #>> optionalTraversal) => Optional(optionalTraversal);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Or(params Func<<#= iface #>, IGremlinQueryBase>[] orTraversals) => Or(orTraversals);

        <#= iface #> IGremlinQueryBaseRec<TElement, <#= iface #>>.Order(Func<IOrderBuilder<TElement, <#= iface #>>, IOrderBuilderWithBy<TElement, <#= iface #>>> projection) => OrderGlobal(projection);
        <#= iface #> IGremlinQueryBaseRec<TElement, <#= iface #>>.OrderLocal(Func<IOrderBuilder<TElement, <#= iface #>>, IOrderBuilderWithBy<TElement, <#= iface #>>> projection) => OrderLocal(projection);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Order(Func<IOrderBuilder<<#= iface #>>, IOrderBuilderWithBy<<#= iface #>>> projection) => OrderGlobal(projection);
        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.OrderLocal(Func<IOrderBuilder<<#= iface #>>, IOrderBuilderWithBy<<#= iface #>>> projection) => OrderLocal(projection);

        IValueGremlinQuery<dynamic> IGremlinQueryBaseRec<TElement, <#= iface #>>.Project(Func<IProjectBuilder<<#= iface #>, TElement>, IProjectResult> continuation) => Project<dynamic>(continuation);
        IValueTupleGremlinQuery<TResult> IGremlinQueryBaseRec<TElement, <#= iface #>>.Project<TResult>(Func<IProjectBuilder<<#= iface #>, TElement>, IProjectResult<TResult>> continuation) => Project<TResult>(continuation);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Range(long low, long high) => RangeGlobal(low, high);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.RangeLocal(long low, long high) => RangeLocal(low, high);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Repeat(Func<<#= iface #>, <#= iface #>> repeatTraversal) => Repeat(repeatTraversal);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.RepeatUntil(Func<<#= iface #>, <#= iface #>> repeatTraversal, Func<<#= iface #>, IGremlinQueryBase> untilTraversal) => RepeatUntil(repeatTraversal, untilTraversal);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.UntilRepeat(Func<<#= iface #>, <#= iface #>> repeatTraversal, Func<<#= iface #>, IGremlinQueryBase> untilTraversal) => UntilRepeat(repeatTraversal, untilTraversal);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.SideEffect(Func<<#= iface #>, IGremlinQueryBase> sideEffectTraversal) => SideEffect(sideEffectTraversal);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.SimplePath() => SimplePath();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Skip(long count) => Skip(count, Scope.Global);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.SkipLocal(long count) => Skip(count, Scope.Local);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Tail(long count) => TailGlobal(count);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.TailLocal(long count) => TailLocal(count);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Times(int count) => Times(count);

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Union<TTargetQuery>(params Func<<#= iface #>, TTargetQuery>[] unionTraversals) => Union(unionTraversals);

        <#= iface #> IGremlinQueryBaseRec<TElement, <#= iface #>>.Where(Expression<Func<TElement, bool>> predicate) => Where(predicate);
        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Where(ILambda lambda) => Where(lambda);
        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Where(Func<<#= iface #>, IGremlinQueryBase> filterTraversal) => Where(filterTraversal);

<# } #>


<# foreach(var iface in Untyped(EdgeOrVertex(substitutedBaseInterfaces))){ #>
        <#= ChangeType(iface, "TTarget").Replace("Base", "") #> <#= iface #>.OfType<TTarget>() => OfType<TTarget>(<#= iface.Contains("VertexGremlinQuery") ? "Environment.Model.VerticesModel" : "Environment.Model.EdgesModel" #>);
<# } #>


<# foreach(var iface in Typed(Element(substitutedBaseInterfaces))){ #>
        <#= iface #> IElementGremlinQueryBaseRec<<#= iface #>>.Property(string key, object? value) => Property(key, value);
        <#= iface #> IElementGremlinQueryBaseRec<TElement, <#= iface #>>.Property<TProjectedValue>(Expression<Func<TElement, TProjectedValue>> projection, TProjectedValue value) => <#= iface.StartsWith("IVertexGremlinQuery") ? "VertexProperty(projection, value);" : "Property(projection, value);" #>

        <#= iface #> IElementGremlinQueryBaseRec<TElement, <#= iface #>>.Where<TProjection>(Expression<Func<TElement, TProjection>> projection, Func<IGremlinQueryBase<TProjection>, IGremlinQueryBase> propertyTraversal) => Where(projection, propertyTraversal);
<# } #>
   }
}

<#@ include file="T4\HelperMethods.tt" #>
