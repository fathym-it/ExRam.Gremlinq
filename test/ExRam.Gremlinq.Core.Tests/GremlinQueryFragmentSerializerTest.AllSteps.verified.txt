[
  {
    Item1: AddEStep,
    Item2: {
      OperatorName: addE,
      Arguments: [
        string
      ]
    }
  },
  {
    Item1: AddEStep.FromLabelStep,
    Item2: {
      OperatorName: from,
      Arguments: [
        {}
      ]
    }
  },
  {
    Item1: AddEStep.FromTraversalStep,
    Item2: {
      OperatorName: from,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: AddEStep.ToLabelStep,
    Item2: {
      OperatorName: to,
      Arguments: [
        {}
      ]
    }
  },
  {
    Item1: AddEStep.ToTraversalStep,
    Item2: {
      OperatorName: to,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: AddVStep,
    Item2: {
      OperatorName: addV,
      Arguments: [
        string
      ]
    }
  },
  {
    Item1: AggregateStep,
    Item2: {
      OperatorName: aggregate,
      Arguments: [
        {
          EnumName: Scope,
          EnumValue: global
        },
        {}
      ]
    }
  },
  {
    Item1: AndStep,
    Item2: {
      OperatorName: and,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: AsStep,
    Item2: {
      OperatorName: as,
      Arguments: [
        {}
      ]
    }
  },
  {
    Item1: BarrierStep,
    Item2: {
      OperatorName: barrier
    }
  },
  {
    Item1: BothEStep,
    Item2: {
      OperatorName: bothE,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: BothStep,
    Item2: {
      OperatorName: both,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: BothVStep,
    Item2: {
      OperatorName: bothV
    }
  },
  {
    Item1: CapStep,
    Item2: {
      OperatorName: cap,
      Arguments: [
        {}
      ]
    }
  },
  {
    Item1: ChooseOptionTraversalStep,
    Item2: {
      OperatorName: choose,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: ChoosePredicateStep,
    Item2: {
      OperatorName: choose,
      Arguments: [
        {
          OperatorName: between,
          Value: [
            string,
            string,
            string
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: ChooseTraversalStep,
    Item2: {
      OperatorName: choose,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: CoalesceStep,
    Item2: {
      OperatorName: coalesce,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: CoinStep,
    Item2: {
      OperatorName: coin,
      Arguments: [
        47.11
      ]
    }
  },
  {
    Item1: ConstantStep,
    Item2: {
      OperatorName: constant,
      Arguments: [
        string
      ]
    }
  },
  {
    Item1: CountStep,
    Item2: {
      OperatorName: count
    }
  },
  {
    Item1: CyclicPathStep,
    Item2: {
      OperatorName: cyclicPath
    }
  },
  {
    Item1: SimplePathStep,
    Item2: {
      OperatorName: simplePath
    }
  },
  {
    Item1: DedupStep,
    Item2: {
      OperatorName: dedup
    }
  },
  {
    Item1: DropStep,
    Item2: {
      OperatorName: drop
    }
  },
  {
    Item1: EmitStep,
    Item2: {
      OperatorName: emit
    }
  },
  {
    Item1: EStep,
    Item2: {
      OperatorName: E,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: ExplainStep,
    Item2: {
      OperatorName: explain
    }
  },
  {
    Item1: FilterStep,
    Item2: {
      OperatorName: filter,
      Arguments: [
        {
          LambdaExpression: lambda,
          Language: gremlin-groovy,
          Arguments: -1
        }
      ]
    }
  },
  {
    Item1: FlatMapStep,
    Item2: {
      OperatorName: flatMap,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: FoldStep,
    Item2: {
      OperatorName: fold
    }
  },
  {
    Item1: GroupStep,
    Item2: {
      OperatorName: group
    }
  },
  {
    Item1: GroupStep.ByTraversalStep,
    Item2: {
      OperatorName: by,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: GroupStep.ByKeyStep,
    Item2: {
      OperatorName: by,
      Arguments: [
        {
          EnumName: T,
          EnumValue: id
        }
      ]
    }
  },
  {
    Item1: HasKeyStep,
    Item2: {
      OperatorName: hasKey,
      Arguments: [
        string
      ]
    }
  },
  {
    Item1: HasLabelStep,
    Item2: {
      OperatorName: hasLabel,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: HasNotStep,
    Item2: {
      OperatorName: hasNot,
      Arguments: [
        {
          EnumName: T,
          EnumValue: id
        }
      ]
    }
  },
  {
    Item1: HasPredicateStep,
    Item2: {
      OperatorName: has,
      Arguments: [
        {
          EnumName: T,
          EnumValue: id
        },
        {
          OperatorName: between,
          Value: [
            string,
            string,
            string
          ]
        }
      ]
    }
  },
  {
    Item1: HasTraversalStep,
    Item2: {
      OperatorName: has,
      Arguments: [
        {
          EnumName: T,
          EnumValue: id
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: HasValueStep,
    Item2: {
      OperatorName: hasValue,
      Arguments: [
        string
      ]
    }
  },
  {
    Item1: IdentityStep,
    Item2: {
      OperatorName: identity
    }
  },
  {
    Item1: IdStep,
    Item2: {
      OperatorName: id
    }
  },
  {
    Item1: InEStep,
    Item2: {
      OperatorName: inE,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: InjectStep,
    Item2: {
      OperatorName: inject,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: InStep,
    Item2: {
      OperatorName: in,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: InVStep,
    Item2: {
      OperatorName: inV
    }
  },
  {
    Item1: IsStep,
    Item2: {
      OperatorName: is,
      Arguments: [
        {
          OperatorName: between,
          Value: [
            string,
            string,
            string
          ]
        }
      ]
    }
  },
  {
    Item1: KeyStep,
    Item2: {
      OperatorName: key
    }
  },
  {
    Item1: LabelStep,
    Item2: {
      OperatorName: label
    }
  },
  {
    Item1: LimitStep,
    Item2: {
      OperatorName: limit,
      Arguments: [
        4711
      ]
    }
  },
  {
    Item1: LocalStep,
    Item2: {
      OperatorName: local,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: MapStep,
    Item2: {
      OperatorName: map,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: MatchStep,
    Item2: {
      OperatorName: match,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: MaxStep,
    Item2: {
      OperatorName: max
    }
  },
  {
    Item1: MeanStep,
    Item2: {
      OperatorName: mean
    }
  },
  {
    Item1: MinStep,
    Item2: {
      OperatorName: min
    }
  },
  {
    Item1: NoneStep,
    Item2: {
      OperatorName: not,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: NotStep,
    Item2: {
      OperatorName: not,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: OptionalStep,
    Item2: {
      OperatorName: optional,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: OptionTraversalStep,
    Item2: {
      OperatorName: option,
      Arguments: [
        string,
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: OrderStep,
    Item2: {
      OperatorName: order
    }
  },
  {
    Item1: OrderStep.ByLambdaStep,
    Item2: {
      OperatorName: by,
      Arguments: [
        {
          LambdaExpression: lambda,
          Language: gremlin-groovy,
          Arguments: -1
        }
      ]
    }
  },
  {
    Item1: OrderStep.ByMemberStep,
    Item2: {
      OperatorName: by,
      Arguments: [
        {
          EnumName: T,
          EnumValue: id
        },
        {
          EnumName: Order,
          EnumValue: asc
        }
      ]
    }
  },
  {
    Item1: OrderStep.ByTraversalStep,
    Item2: {
      OperatorName: by,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          EnumName: Order,
          EnumValue: asc
        }
      ]
    }
  },
  {
    Item1: OrStep,
    Item2: {
      OperatorName: or,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: OtherVStep,
    Item2: {
      OperatorName: otherV
    }
  },
  {
    Item1: OutEStep,
    Item2: {
      OperatorName: outE,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: OutStep,
    Item2: {
      OperatorName: out,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: OutVStep,
    Item2: {
      OperatorName: outV
    }
  },
  {
    Item1: PathStep,
    Item2: {
      OperatorName: path
    }
  },
  {
    Item1: ProfileStep,
    Item2: {
      OperatorName: profile
    }
  },
  {
    Item1: ProjectStep,
    Item2: {
      OperatorName: project,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: ProjectStep.ByTraversalStep,
    Item2: {
      OperatorName: by,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: ProjectStep.ByKeyStep,
    Item2: {
      OperatorName: by,
      Arguments: [
        {
          EnumName: T,
          EnumValue: id
        }
      ]
    }
  },
  {
    Item1: PropertiesStep,
    Item2: {
      OperatorName: properties,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: PropertyStep,
    Item2: {
      OperatorName: property,
      Arguments: [
        {
          EnumName: T,
          EnumValue: id
        },
        string
      ]
    }
  },
  {
    Item1: RangeStep,
    Item2: {
      OperatorName: range,
      Arguments: [
        4711,
        4711
      ]
    }
  },
  {
    Item1: RepeatStep,
    Item2: {
      OperatorName: repeat,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: SelectKeysStep,
    Item2: {
      OperatorName: select,
      Arguments: [
        {
          EnumName: T,
          EnumValue: id
        },
        {
          EnumName: T,
          EnumValue: id
        },
        {
          EnumName: T,
          EnumValue: id
        }
      ]
    }
  },
  {
    Item1: SelectStep,
    Item2: {
      OperatorName: select,
      Arguments: [
        {},
        {},
        {}
      ]
    }
  },
  {
    Item1: SideEffectStep,
    Item2: {
      OperatorName: sideEffect,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: SkipStep,
    Item2: {
      OperatorName: skip,
      Arguments: [
        4711
      ]
    }
  },
  {
    Item1: SumStep,
    Item2: {
      OperatorName: sum
    }
  },
  {
    Item1: TailStep,
    Item2: {
      OperatorName: tail,
      Arguments: [
        4711
      ]
    }
  },
  {
    Item1: TimesStep,
    Item2: {
      OperatorName: times,
      Arguments: [
        4711
      ]
    }
  },
  {
    Item1: UnfoldStep,
    Item2: {
      OperatorName: unfold
    }
  },
  {
    Item1: UnionStep,
    Item2: {
      OperatorName: union,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        },
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: UntilStep,
    Item2: {
      OperatorName: until,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: ValueMapStep,
    Item2: {
      OperatorName: valueMap,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: ValuesStep,
    Item2: {
      OperatorName: values,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: ValueStep,
    Item2: {
      OperatorName: value
    }
  },
  {
    Item1: VStep,
    Item2: {
      OperatorName: V,
      Arguments: [
        string,
        string,
        string
      ]
    }
  },
  {
    Item1: WherePredicateStep,
    Item2: {
      OperatorName: where,
      Arguments: [
        {
          OperatorName: between,
          Value: [
            string,
            string,
            string
          ]
        }
      ]
    }
  },
  {
    Item1: WherePredicateStep.ByMemberStep,
    Item2: {
      OperatorName: by,
      Arguments: [
        {
          EnumName: T,
          EnumValue: id
        }
      ]
    }
  },
  {
    Item1: WhereStepLabelAndPredicateStep,
    Item2: {
      OperatorName: where,
      Arguments: [
        {},
        {
          OperatorName: between,
          Value: [
            string,
            string,
            string
          ]
        }
      ]
    }
  },
  {
    Item1: WhereTraversalStep,
    Item2: {
      OperatorName: where,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  },
  {
    Item1: WithoutStrategiesStep,
    Item2: {
      OperatorName: withoutStrategies,
      Arguments: [
        Object,
        Object,
        Object
      ]
    }
  },
  {
    Item1: WithStrategiesStep,
    Item2: {
      OperatorName: withStrategies,
      Arguments: [
        {
          StepInstructions: [
            {
              OperatorName: identity
            }
          ]
        }
      ]
    }
  }
]